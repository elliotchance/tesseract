# Testing values of all different types can be understood by the parser.

tests:
  null:
    sql: SELECT null
    result:
    - {"col1": null}

  true:
    sql: SELECT true
    result:
    - {"col1": true}

  false:
    sql: SELECT false
    result:
    - {"col1": false}

  integer:
    sql: SELECT 123
    result:
    - {"col1": 123}

  integer_with_exponent:
    sql: SELECT 1e3
    as: SELECT 1000.0
    result:
    - {"col1": 1000.0}

  negative_integer:
    sql: SELECT -123
    result:
    - {"col1": -123}

  explicit_positive_integer:
    sql: SELECT +123
    as: SELECT 123
    result:
    - {"col1": 123}

  float:
    sql: SELECT 12.3
    result:
    - {"col1": 12.3}

  negative_float:
    sql: SELECT -12.5
    result:
    - {"col1": -12.5}

  float_without_preceeding_integer:
    sql: SELECT -.23
    as: SELECT -0.23
    result:
    - {"col1": -0.23}

  float_in_scientific_notation:
    sql: SELECT 1.23e3
    as: SELECT 1230.0
    result:
    - {"col1": 1230.0}

  negative_float_in_scientific_notation:
    sql: SELECT 1.23e-3
    as: SELECT 0.00123
    result:
    - {"col1": 0.00123}

  float_in_scientific_notation_with_big_exponent:
    sql: SELECT 1.23e10
    as: SELECT 12300000000.0
    result:
    - {"col1": 12300000000.0}

  negative_float_in_scientific_notation_with_explicit_positive_exponent:
    sql: SELECT 1.23e+3
    as: SELECT 1230.0
    result:
    - {"col1": 1230.0}

  explicit_positive_float:
    sql: SELECT +12.3
    as: SELECT 12.3
    result:
    - {"col1": 12.3}

  string:
    sql: SELECT "foo"
    result:
    - {"col1": "foo"}

  json_object_with_zero_elements:
    sql: 'SELECT {}'
    result:
    - {"col1": {}}

  json_object_with_one_element:
    sql: 'SELECT {"foo": null}'
    result:
    - {"col1": {"foo": null}}

  json_object_with_two_elements:
    sql: 'SELECT {"foo": "bar", "baz": 123}'
    result:
    - {"col1": {"foo": "bar", "baz": 123}}

  json_object_with_three_elements:
    sql: 'SELECT {"foo": "bar", "bar": "baz", "abc": "def"}'
    result:
    - {"col1": {"foo": "bar", "bar": "baz", "abc": "def"}}

  json_object_duplicate_item_uses_second:
    comment: |
      This is another case of where the rendering of the statement does not come
      out exactly the same... This may or not be a bad thing depending on which
      way you look at it.
    sql: 'SELECT {"foo": "bar", "foo": "baz"}'
    as: 'SELECT {"foo": "baz"}'
    result:
    - {"col1": {"foo": "baz"}}

  json_array_with_zero_items:
    comment: |
      Lua does not differentiate between normal arrays and associative arrays,
      this leads to it encoding empty arrays as empty objects.
    sql: 'SELECT []'
    result:
    - {"col1": {}}

  json_array_with_one_item:
    sql: 'SELECT [123]'
    result:
    - {"col1": [123]}

  json_array_with_two_items:
    sql: 'SELECT ["foo", "bar"]'
    result:
    - {"col1": ["foo", "bar"]}

  json_array_with_three_items:
    sql: 'SELECT ["foo", "bar", "baz"]'
    result:
    - {"col1": ["foo", "bar", "baz"]}

  json_object_duplicate_item_raises_warning:
    sql: 'SELECT {"foo": "bar", "foo": "baz"}'
    as: 'SELECT {"foo": "baz"}'
    warning: Duplicate key "foo", using last value.

  multiple_warnings_can_be_raised:
    sql: 'SELECT {"foo": "bar", "foo": "baz", "foo": "bax"}'
    as: 'SELECT {"foo": "bax"}'
    warning:
    - Duplicate key "foo", using last value.
    - Duplicate key "foo", using last value.

  string_double_quotes:
    sql: SELECT "false"
    result:
    - {"col1": "false"}

  string_single_quotes:
    sql: SELECT 'false'
    result:
    - {"col1": "false"}
