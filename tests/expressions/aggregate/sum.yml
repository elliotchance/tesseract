data:
  table1:
  - {"a": 123}
  - {"a": 456}
  - {"a": 123}

  table2:
  - {"a": 1}
  - {"a": null}
  - {"a": 2}

  table3:
  - {"a": 123, "b": 5}
  - {"a": 456, "b": 7}
  - {"a": 123, "b": null}

  empty: []

tests:
  # No grouping.
  sum_all_without_nulls:
    comment: |
      This is the most basic sum of all records (there are no nulls) so we
      should always get a result and that result is not null.
    data: table1
    sql: SELECT sum(a) FROM table1
    result:
    - {"col1": 702}

  sum_all_containing_nulls:
    comment: If there is one null then the result must be null.
    data: table2
    sql: SELECT sum(a) FROM table2
    result:
    - {"col1": null}

  sum_all_containing_missing:
    comment: |
      Missing values are equal to null values, and the result should wor the
      same way.
    data: table1
    sql: SELECT sum(c) FROM table2
    result:
    - {"col1": null}

  sum_all_zero_rows:
    comment: Zero rows must yield one result row containing 0.
    data: empty
    sql: SELECT sum(a) FROM empty
    result:
    - {"col1": 0}

  # GROUP BY
  sum_groups_1:
    comment: |
      First scenario when the groups and the values do not contain any nulls.
    data: table1
    sql: SELECT a, sum(a) FROM table1 GROUP BY a
    result:
    - {"a": 456, "col2": 456}
    - {"a": 123, "col2": 246}

  sum_groups_2:
    comment: |
      Second scenario when the groups do not contain nulls, but some of the
      values have nulls.
    data: table3
    sql: SELECT a, sum(b) FROM table3 GROUP BY a
    result:
    - {"a": 456, "col2": 7}
    - {"a": 123, "col2": null}

  #sum_groups_b:
  #  data: table1
  #  sql: SELECT a, sum(b) FROM people WHERE b IS NOT null GROUP BY a
  #  result:
  #  - {"a": 456, "col2": 100}
  #  - {"a": 123, "col2": 0}
  #  - {"a": null, "col2": 123}
#
  #sum_all_expression:
  #  data: table1
  #  sql: SELECT sum(a + 10) FROM table2 WHERE a IS NOT null
  #  result:
  #  - {"col1": 630}
