tests:
  left_null:
    sql: 'SELECT null <> 123'
    result:
    - {"col1": null}

  right_null:
    sql: 'SELECT 123 <> null'
    result:
    - {"col1": null}

  both_null:
    sql: 'SELECT null <> null'
    result:
    - {"col1": null}

  boolean_equal:
    sql: 'SELECT true <> true'
    result:
    - {"col1": false}

  boolean_not_equal:
    sql: 'SELECT true <> false'
    result:
    - {"col1": true}

  number_equal:
    sql: 'SELECT 123 <> 123'
    result:
    - {"col1": false}

  number_not_equal:
    sql: 'SELECT 123 <> 456'
    result:
    - {"col1": true}

  string_equal:
    sql: 'SELECT "foo" <> "foo"'
    result:
    - {"col1": false}

  string_not_equal:
    sql: 'SELECT "foo" <> "bar"'
    result:
    - {"col1": true}

  # Array comparisons.
  comparing_empty_arrays:
    sql: 'SELECT [] <> []'
    result:
    - {"col1": false}

  left_array_has_more_items:
    sql: 'SELECT [1, 2] <> [1]'
    result:
    - {"col1": true}

  right_array_has_more_items:
    sql: 'SELECT [1] <> [1, 2]'
    result:
    - {"col1": true}

  equal_arrays:
    sql: 'SELECT [1, 2] <> [1, 2]'
    result:
    - {"col1": false}

  non_equal_arrays:
    sql: 'SELECT [1, 2] <> [2, 1]'
    result:
    - {"col1": true}

  # Object comparisons.
  comparing_empty_objects:
    sql: 'SELECT {} <> {}'
    result:
    - {"col1": false}

  left_object_has_more_items:
    sql: 'SELECT {"foo": "bar"} <> {}'
    result:
    - {"col1": true}

  right_object_has_more_items:
    sql: 'SELECT {} <> {"foo": "bar"}'
    result:
    - {"col1": true}

  equal_objects:
    sql: 'SELECT {"foo": "bar", "bar": "baz"} <> {"bar": "baz", "foo": "bar"}'
    parse: false
    result:
    - {"col1": false}

  non_equal_objects:
    sql: 'SELECT {"foo": "bar", "bar": "baz"} <> {"foo": "barZ", "bar": "baz"}'
    parse: false
    result:
    - {"col1": true}

  # Normally when we compare scalar values there must be a operator that
  # supports the comparison or an error is thrown like 'No such operator ...'.
  # However, since arrays and objects trigger a recursive comparison for
  # individual items we want to make sure that recursion cascades back up to
  # `false` if anything cannot be compared rather than error.
  recursive_comparisons_return_booleans:
    sql: 'SELECT [1] <> [true]'
    result:
    - {"col1": true}

  incompatible_types:
    sql: SELECT false <> 3.5
    error: No such operator boolean <> number.

  alternate_operator:
    sql: 'SELECT null != 123'
    as: 'SELECT null <> 123'
    result:
    - {"col1": null}
